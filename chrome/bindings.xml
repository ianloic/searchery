<?xml version="1.0"?>

<bindings id="searcheryBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="autocomplete-rich-result-popup"
           extends="chrome://browser/content/urlbarBindings.xml#urlbar-rich-result-popup">
    <content ignorekeys="true">
      <xul:vbox anonid="searchery-sections">
        <xul:vbox selected="true" class="searchery-section-places"
                  title="History and Bookmarks">
          <xul:richlistbox anonid="richlistbox" class="autocomplete-richlistbox"
              flex="1"/>
        </xul:vbox>
      </xul:vbox>
    </content>

    <implementation implements="nsIAutoCompletePopup">
      <constructor><![CDATA[
        this._sections.push(null);
        var sections_vbox = document.getAnonymousElementByAttribute(this,
            'anonid', 'searchery-sections');
        function makeSection(title, id) {
          var section = document.createElement('vbox');
          section.className = 'searchery-section';
          section.setAttribute('title', title);
          section.setAttribute('id', id);
          sections_vbox.appendChild(section);
          return section;
        }


        this._sections.push(makeSection('Search Engines', 'searchery-engines'));
        this._sections.push(makeSection('Google Results', 'searchery-google'));
        this._sections.push(makeSection('Amazon Engines', 'searchery-amazon'));

        var self = this;
        // this listener is attached to the input when it can be
        this._inputListener = function (event) {
          self.newSearch();
        }


        // overrride closePopup with my own
        //this.closePopup = this._closePopup
      ]]></constructor>
      <field name="_section">0</field>
      <field name="_sections">new Array()</field>
      <method name="selectBy">
        <parameter name="aReverse"/>
        <parameter name="aPage"/>
        <body>
          <![CDATA[
          /* this is called by the controller when the arrow or page keys are
             pressed. it must be subverted for our nefarious purposes */
          try {
            dump('selectBy(aReverse='+aReverse+', aPage='+aPage+')\n');
            if (aPage) {
              // page up/down means switch section
              this._section += (aReverse?-1:1);
              dump('this._section = '+this._section+'\n');
              var sections_vbox = document.getAnonymousElementByAttribute(this,
                  'anonid', 'searchery-sections');
              var sections = sections_vbox.childNodes;
              dump(' sections.length: '+sections.length+'\n');
              for (var i=0; i<sections.length; i++) {
                dump('check out: '+sections[i]+'\n');
                if (i == this._section) {
                  sections[i].setAttribute('selected', 'true');
                } else {
                  sections[i].removeAttribute('selected');
                }
              }
            } else {
              this.selectedIndex = this.getNextIndex(aReverse, 1,
                  this.selectedIndex, this._matchCount - 1);
              if (this.selectedIndex == -1) {
                dump(' focussing the url bar\n');
                this.input._focus();
              }
            }
          } catch (ex) {
            Components.utils.reportError(ex);
          }
            ]]>
        </body>
      </method>

      <method name="newSearch">
        <body><![CDATA[
          try {
            var query = this.input.controller.searchString;

            dump('newSearch: '+query+'\n');
            for (var i=0; i<this._sections.length; i++) {
              if (this._sections[i]) {
                try {
                  this._sections[i].newSearch(query);
                } catch(e) {
                  Components.utils.reportError(e);
                }
              }
            }
          } catch(e) {
          Components.utils.reportError(e);
        }
        ]]></body>
      </method>

      <method name="closePopup">
        <body>
          <![CDATA[
          dump('closePopup\n');
          if (this.mPopupOpen) {
            this.hidePopup();
            document.popupNode = null;
            this.removeAttribute("width");
          }
        ]]>
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="popupshowing"><![CDATA[
        this.newSearch();
        this.input.addEventListener('input', this._inputListener, false);
      ]]></handler>
      <handler event="popuphiding"><![CDATA[
        this.input.removeEventListener('input', this._inputListner, false);
      ]]></handler>
    </handlers>
  </binding>

  <binding id="base-section" extends="xul:vbox">
    <content>
      <xul:hbox>
        <xul:label class="searchery-section-header" xbl:inherits="value=title"/>
        <xul:spacer flex="1"/>
        <xul:image class="searchery-section-spinner"/>
      </xul:hbox>
      <children/>
    </content>
    <implementation>
      <property name="loading">
        <setter><![CDATA[
          if (val) {
            this.setAttribute('loading', 'true');
          } else {
            this.removeAttribute('loading');
          }
        ]]></setter>
      </property>
    </implementation>
  </binding>

  <binding id="places-section" extends="#base-section">
    <implementation>
      <method name="onPopupClick">
        <parameter name="event" />
        <body><![CDATA[
          // pass this up one binding...
          return this.parentNode.parentNode.onPopupClick(event);
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="section" extends="#base-section">
    <implementation>
      <field name="richlistbox">null</field>
      <field name="lastQuery">''</field>
      <constructor><![CDATA[
        this.richlistbox = document.createElement('richlistbox');
        this.richlistbox.className = 'autocomplete-richlistbox searchery-richlistbox';
        this.richlistbox.setAttribute('flex', '1');
        this.appendChild(richlistbox);

        this.popup = this.parentNode.parentNode;
      ]]></constructor>

      <method name="onPopupClick">
        <parameter name="event" />
        <body><![CDATA[
          // pass this up one binding...
          var item = this.richlistbox.selectedItem;
          var url = item.getAttribute('url');
          this.popup.closePopup();
          this.popup.input.textValue = url;
          handleURLBarCommand(event);
        ]]></body>
      </method>

      <method name="clearResults">
        <body><![CDATA[
          // clear the richlistbox
          while(this.richlistbox.firstChild) {
            this.richlistbox.removeChild(this.richlistbox.firstChild);
          }
        ]]></body>
      </method>
      <method name="addResult">
        <parameter name="uri"/>
        <parameter name="title"/>
        <parameter name="image"/>
        <parameter name="cssClass"/>
        <body><![CDATA[
          // trim the leading/trailing whitespace
          var trimmedSearchString =
              this.lastQuery.replace(/^\s+/, "").replace(/\s+$/, "");

          // need to create a new item
          var item = document.createElement("richlistitem");

          // set these attributes before we set the class
          // so that we can use them from the contructor
          item.setAttribute("image", image);
          item.setAttribute("url", uri);
          item.setAttribute("title", title);
          item.setAttribute("type", cssClass);
          item.setAttribute("text", trimmedSearchString);
          item.className = "autocomplete-richlistitem";
          this.richlistbox.appendChild(item);
        ]]></body>
      </method>
      <method name="newSearch">
        <parameter name="query"/>
        <body><![CDATA[
          // do stuff
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="engines-section" extends="#section">

    <implementation>
      <method name="newSearch">
        <parameter name="query"/>
        <body><![CDATA[
          // save the query
          // FIXME: refactor this into a baseclass somehow
          this.lastQuery = query;

          dump('engines newSearch\n');
          // make sure we have a reference to the search service
          if (!this._searchService) {
            this._searchService =
                Components.classes['@mozilla.org/browser/search-service;1']
                .getService(Components.interfaces.nsIBrowserSearchService);
          }

          // clear the richlistbox
          this.clearResults();

          // fill it with search engines...
          var engines = this._searchService.getVisibleEngines({ });
          for (var i=0; i<engines.length; i++) {
            var submission = engines[i].getSubmission(query, 'text/html');
            this.addResult(submission.uri.spec,
                'Search for "'+query+'" on '+engines[i].name,
                engines[i].iconURI.spec,
                'suggesthint searchery srch-searchengines');
          }

        ]]></body>
      </method>
      -->

    </implementation>

  </binding>
</bindings>
